# See https://github.com/langchain-ai/langchain/tree/master/.github/workflows/_release.yml
# for inspiration of this release
name: release
run-name: Release by @${{ github.actor }}
on:
  workflow_call:
  workflow_dispatch:

env:
  POETRY_VERSION: "1.8.3"

jobs:
  build:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    permissions:
      # This permission is used for trusted publishing:
      # https://blog.pypi.org/posts/2023-04-20-introducing-trusted-publishers/
      #
      # Trusted publishing has to also be configured on PyPI for each package:
      # https://docs.pypi.org/trusted-publishers/adding-a-publisher/
      id-token: write
      contents: write

    outputs:
      pkg-name: ${{ steps.check-version.outputs.pkg-name }}
      version: ${{ steps.check-version.outputs.version }}

    steps:
      # checkout & set up
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install poetry
        uses: snok/install-poetry@v1

      # build
      - name: Build project
        run: poetry build

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          # path: ${{ inputs.working-directory }}/dist/

      - name: Check Version
        id: check-version
        shell: bash
        # working-directory: ${{ inputs.working-directory }}
        run: |
          echo pkg-name="$(poetry version | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT
          echo version="$(poetry version --short)" >> $GITHUB_OUTPUT

      # publish to PyPI
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          # packages-dir: ${{ inputs.working-directory }}/dist/
          verbose: true
          print-hash: true

      # release notes
      - name: Check Tags
        id: check-tags
        shell: bash
        env:
          PKG_NAME: ${{ steps.check-version.outputs.pkg-name }}
          VERSION: ${{ steps.check-version.outputs.version }}
        run: |
          REGEX="^$PKG_NAME==\\d+\\.\\d+\\.\\d+\$"
          echo $REGEX
          PREV_TAG=$(git tag --sort=-creatordate | grep -P $REGEX || true | head -1)
          TAG="${PKG_NAME}==${VERSION}"
          if [ "$TAG" == "$PREV_TAG" ]; then
            echo "No new version to release"
            exit 1
          fi
          echo tag="$TAG" >> $GITHUB_OUTPUT
          echo prev-tag="$PREV_TAG" >> $GITHUB_OUTPUT
      - name: Generate release body
        id: generate-release-body
        env:
          # WORKING_DIR: ${{ inputs.working-directory }}
          WORKING_DIR: .
          PKG_NAME: ${{ steps.check-version.outputs.pkg-name }}
          TAG: ${{ steps.check-tags.outputs.tag }}
          PREV_TAG: ${{ steps.check-tags.outputs.prev-tag }}
        run: |
          PREAMBLE="Changes since $PREV_TAG"
          # if PREV_TAG is empty, then we are releasing the first version
          if [ -z "$PREV_TAG" ]; then
            PREAMBLE="Initial release"
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          {
            echo 'release-body<<EOF'
            echo $PREAMBLE
            echo
            git log --format="%s" "$PREV_TAG"..HEAD -- $WORKING_DIR
            echo EOF
          } >> "$GITHUB_OUTPUT"

      # create a tag for the release
      - name: Create Tag
        uses: ncipollo/release-action@v1
        with:
          artifacts: "dist/*"
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: false
          tag: ${{steps.check-version.outputs.pkg-name}}==${{ steps.check-version.outputs.version }}
          # body: ${{ needs.release-notes.outputs.release-body }}
          body: ${{ steps.generate-release-body.outputs.release-body }}
          commit: ${{ github.sha }}
          makeLatest: true
